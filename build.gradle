apply plugin: 'com.android.application'

buildscript {
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://maven.google.com"
        }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
    }
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation('com.android.support:appcompat-v7:21.0.3')
}

android {
    compileSdkVersion 21

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['/assets/']
            jniLibs.srcDirs = ['libs']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    dexOptions {
        preDexLibraries false
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("OAKESVILLE_KEYSTORE_FILE"))
            storePassword System.getenv("OAKESVILLE_KEYSTORE_PASSWORD")
            keyAlias System.getenv("OAKESVILLE_KEY_ALIAS")
            keyPassword System.getenv("OAKESVILLE_KEY_PASSWORD")
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

task buildMythlingEpg(type: Exec) {
    workingDir mythlingEpgLoc
    commandLine 'cmd', '/c', 'grunt', '--no-color'
}

task copyEpgDist(type: Copy) {
    dependsOn buildMythlingEpg
    from("${mythlingEpgLoc}/dist") {
        exclude 'demo/'
        exclude 'js/mythling-epg.min.js'
        exclude 'js/mythling-epg-omb.min.js'
    }
    into 'assets/mythling-epg'
}

task getMythlingEpg() {
    dependsOn copyEpgDist
}

task devCopyJs(type: Copy) {
    from("${mythlingEpgLoc}/src") {
        include 'epg-device.js'
        include 'epg-firetv.js'
    }
    into 'assets/mythling-epg/js'
}

// Copies epg resources directly from src rather than dist.
// Does not include stuff that needs to be processed by grunt (mythling-epg.js, guide.html)
// Run grunt and then copyEpgDist at least once first.
task devCopyEpg(type: Copy) {

    dependsOn devCopyJs

    from("${mythlingEpgLoc}") {
        include 'views/*'
        include 'css/*'
    }
    into 'assets/mythling-epg'
}
